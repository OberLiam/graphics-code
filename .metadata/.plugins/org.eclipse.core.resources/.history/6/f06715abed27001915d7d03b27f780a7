package main;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.swing.JFrame;

import objects.*;

public class Start
{
	public static final String outImage = "infinity.png";
	public static final boolean writeScreen = true;
	public static final boolean writeFile = true;
	public static final int DIM_WIDTH = 900;
	public static final int DIM_HEIGHT = 900;
	
	public static void main(String[] args) {
		Cosmos myCosmos = new Cosmos();
		
		buildWorldInfinity(myCosmos);
		
		// build the picture
		BufferedImage bimg = new BufferedImage(DIM_WIDTH, DIM_HEIGHT, BufferedImage.TYPE_INT_ARGB);
		for(int i=0;i<DIM_WIDTH;i++) {
			for(int j=0;j<DIM_HEIGHT;j++) {
				int color = 0;
				if(true) {
					double worldX = (double)(2*i-DIM_WIDTH)/DIM_WIDTH; // maps roughly
					double worldY = (double)(2*j-DIM_HEIGHT)/DIM_HEIGHT; // to [-1.0, +1.0]**2
					Ray eyeRay = new Ray(new Vector3(worldX, worldY, 1), new Vector3(0, 0, -1));
					Vector3 colorVec = myCosmos.getColorVector(eyeRay, 10); //here's where we get the actual pixel colors
					color = toColor(colorVec);
					bimg.setRGB(i, j, color);
				}
				else if(false) {
					double worldX = (double)(2*i-DIM_WIDTH)/DIM_WIDTH; // maps roughly
					double worldY = (double)(2*j-DIM_HEIGHT)/DIM_HEIGHT; // to [-1.0, +1.0]**2
					Ray eyeRay = new Ray(new Vector3(0, 0, 1), new Vector3(worldX, worldY, -1).normalized());
					Vector3 colorVec = myCosmos.getColorVector(eyeRay, 10); //here's where we get the actual pixel colors
					color = toColor(colorVec);
					bimg.setRGB(i, j, color);
				}
				else {
					double worldX = (double)(2*i-DIM_WIDTH)/DIM_WIDTH; // maps roughly
					double worldY = (double)(2*j-DIM_HEIGHT)/DIM_HEIGHT; // to [-1.0, +1.0]**2
					Ray eyeRayL = new Ray(new Vector3(+0.1, 0, 1), new Vector3(worldX, worldY, -1).normalized());
					Vector3 colorVecL = myCosmos.getColorVector(eyeRayL, 10); //here's where we get the actual pixel colors
					Ray eyeRayR = new Ray(new Vector3(-0.1, 0, 1), new Vector3(worldX, worldY, -1).normalized());
					Vector3 colorVecR = myCosmos.getColorVector(eyeRayR, 10); //here's where we get the actual pixel colors
					color = toColor(Vector3.weightSum(colorVecL, colorVecR, 0.5));
					bimg.setRGB(i, j, color);
				}
			}
		}
		System.out.println("Finished processing...");
		
		if(writeFile) {
			File outputfile = new File("results/"+outImage);
			try { ImageIO.write(bimg, "png", outputfile); }
			catch (IOException e) { e.printStackTrace(); }
		}
		if(writeScreen) {
			JFrame displayWindow = new ImageJFrame(bimg);
			displayWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			displayWindow.pack(); // sets size, remember
			displayWindow.setVisible(true);
			displayWindow.setLocationRelativeTo(null);
			displayWindow.setResizable(false);
		}
		System.out.println("Finished writing...");
	}
	
	public static void buildWorldAssembly(Cosmos theCosmos) {
		Random randomness = new Random();
		RealThing[] spheres = new RealThing[10];
		for(int i=0;i<10;i++) {
			spheres[i] = new RealThing();
			spheres[i].transparent = false;
			spheres[i].reflective = false;
			spheres[i].intersector = new Sphere(
					new Vector3(1.0-i*i/5.0, -2.0 + (i-5)*(i-5)/15.0, -i-0.5), // center
					0.4, // radius
					new Vector3(randomness.nextDouble(), randomness.nextDouble(), randomness.nextDouble()));
		}
		RealThing[] spheres2 = new RealThing[10];
		for(int i=0;i<10;i++) {
			spheres2[i] = new RealThing();
			spheres2[i].transparent = false;
			spheres2[i].reflective = false;
			spheres2[i].intersector = new Sphere(
					new Vector3(i*i/5.0 - 1.0, 2.0 - (i-5)*(i-5)/15.0, -i-0.5), // center
					0.4, // radius
					new Vector3(randomness.nextDouble(), randomness.nextDouble(), randomness.nextDouble()));
		}
		
		Light light = new Light(
				new Vector3(-0.7, 0.3, 0.0),
				1.0);
		Light light2 = new Light(
				new Vector3(+0.7, 0.3, 0.0),
				1.0);
		
		theCosmos.realThings = new RealThing[spheres.length+spheres2.length];
		for(int i=0;i<spheres.length;i++)
			theCosmos.realThings[i] = spheres[i];
		for(int i=0;i<spheres2.length;i++)
			theCosmos.realThings[spheres.length + i] = spheres2[i];
		theCosmos.lights = new Light[] {light};
	}
	
	public static void buildWorldInfinity(Cosmos theCosmos) {
		RealThing sphereL = new RealThing();
		sphereL.reflective = true;
		sphereL.reflectivity = 0.9;
		sphereL.transparent = false;
		sphereL.intersector = new Sphere(
				new Vector3(-0.5, 0.0, 0.4),
				0.4,
				Vector3.RED);
		
		RealThing sphereR = new RealThing();
		sphereR.reflective = true;
		sphereR.reflectivity = 0.9;
		sphereR.transparent = false;
		sphereR.intersector = new Sphere(
				new Vector3(+0.5, 0.0, 0.4),
				0.4,
				Vector3.BLUE);
		
		RealThing sphereB = new RealThing();
		sphereB.reflective = true;
		sphereB.reflectivity = 0.9;
		sphereB.transparent = false;
		sphereB.intersector = new Sphere(
				new Vector3(+0.5, 0.0, 0.4),
				0.4,
				Vector3.BLUE);
		
		Light light = new Light(
				new Vector3(-0.4, -0.8, 0.4), //position
				1.0);
		
		theCosmos.realThings = new RealThing[] {sphereL, sphereR};
		theCosmos.lights = new Light[] {light};
	}
	
	//TODO: outsource this to a text file
	public static void buildWorld(Cosmos theCosmos) { // this is just for readability
		RealThing redTriangle = new RealThing();
		redTriangle.reflective = false;
		redTriangle.transparent = false;
		redTriangle.intersector = new Plane(
				new Vector3(0.0, 0.0, -0.7), 
				new Vector3(0.5, 0, -6), 
				new Vector3(-0.1, 0.5, 0.5),
				IShape.TRIANGLE,
				new Vector3(1.0, 0.0, 0.0)); //colorVector
		redTriangle.active = true;
		
		RealThing blueTriangle = new RealThing();
		blueTriangle.reflective = false;
		blueTriangle.transparent = false;
		blueTriangle.intersector = new Plane(
				new Vector3(0.3, -0.5, 0),
				new Vector3(0.3, 0.5, 0),
				new Vector3(0.6, 0.5, 0),
				IShape.TRIANGLE,
				new Vector3(0.2, 0.0, 0.5)); //colorVector
		blueTriangle.active = true;
		
		RealThing greenSphere = new RealThing();
		greenSphere.reflective = true;
		greenSphere.reflectivity = 0.50;
		greenSphere.transparent = false;
		greenSphere.intersector = new Sphere(
				new Vector3(0, 0, -0.5),
				0.4, //radius
				new Vector3(0.3, 1.0, 0.0)); //colorVector
		
		RealThing blueSphere = new RealThing();
		blueSphere.reflective = false;
		blueSphere.transparent = true;
		blueSphere.transparency = 0.7;
		blueSphere.intersector = new Sphere(
				new Vector3(0, 0.5, -0.5),
				0.3, //radius
				new Vector3(0.3, 0.5, 0.9)); //colorVector
		
		RealThing rainbowTriangle = new RealThing();
		rainbowTriangle.reflective = false;
		rainbowTriangle.transparent = false;
		rainbowTriangle.intersector = new Plane(
				new Vector3(-0.2, 0.0, 0.0), 
				new Vector3(-0.7, 0, 0.0), 
				new Vector3(-0.1, 0.5, 0.0),
				IShape.TRIANGLE,
				new TexSmooth(
					new Vector3(1.0, 0.0, 0.0), //colorVector1
					new Vector3(0.0, 1.0, 0.0), //colorVector2
					new Vector3(0.0, 0.0, 1.0))//colorVector3
				);
		
		RealThing backgroundPlane = new RealThing();
		backgroundPlane.reflective = false;
		backgroundPlane.reflectivity = 1.00;
		backgroundPlane.transparent = true;
		backgroundPlane.transparency = 0.0;
		backgroundPlane.intersector = new Plane(
				new Vector3(0.0, +0.6, -3.0), //origin
				new Vector3(1.0, 0.0, 0.0),   //u
				new Vector3(0.0, 1.0, +3.0),   //v
				IShape.PLANE,
				new Vector3(1.0, 1.0, 1.0));  //color
		
		RealThing coolPlane = new RealThing();
		coolPlane.reflective = true;
		coolPlane.reflectivity = 0.8;
		coolPlane.transparent = false;
		coolPlane.intersector = new Plane(
				new Vector3(0.0, 0.0, -4.1), //origin
				new Vector3(0.0, 0.2, 0.2), //u
				new Vector3(0.2, 0.0, -0.1), //v
				IShape.PLANE,
				new TexChecker(
					new Vector3(1.0, 1.0, 0.0), //color
					new Vector3(1.0, 0.0, 1.0))
				);//color
		
		RealThing bookCover = new RealThing();
//		ImgTexture bookTex = new ImgTexture("lepetitprince.jpg");
		bookCover.reflective = false;
		bookCover.transparent = false;
		bookCover.intersector = new Plane(
				new Vector3(0.1, -1.4, +0.0), //p
				new Vector3(1.0, +0.01, 0.5), //u (x)
				new Vector3(0.0, +1.2, 0.0), //v (y)
				IShape.SQUARE,
				new TexImage("lepetitprince.jpg"));
		
		RealThing coagulation = new RealThing();
		coagulation.reflective = false;
		coagulation.transparent = false;
		Vector3 coagColor = new Vector3(1.0, 0.0, 0.0);
		IIntersector[] faces = new IIntersector[] {
			new Plane(new Vector3(-1.0, -1.0, -1.0), new Vector3(1.0, 0.0, 0.0), new Vector3(0.0, 1.0, 0.0), IShape.SQUARE, coagColor),
			new Plane(new Vector3(-1.0, -1.0, -1.0), new Vector3(1.0, 0.0, 0.0), new Vector3(0.0, 0.0, 1.0), IShape.SQUARE, coagColor)
		};
		coagulation.intersector = new Grouping(
				new Vector3(1.7, +0.9, 1.0),
				faces);
		
		Light firstLight = new Light(
				new Vector3(0.0, 0.0, 1.2),
				2.0);
		
		Light secondLight = new Light(
				new Vector3(-2.0, 0.0, 0.5),
				1.0);
		
		Light thirdLight = new Light(
				new Vector3(1.0, 1.0, 4.0),
				0.4);
		
		theCosmos.realThings = new RealThing[] {
				redTriangle, blueTriangle, greenSphere, blueSphere, 
				rainbowTriangle, backgroundPlane, coolPlane, bookCover, coagulation
		};
		theCosmos.lights = new Light[] {
				firstLight, secondLight, thirdLight
		};
	}
	
	public static char getAscii(int digit) { // for if you're too cool for color images
		switch(digit) {
		case 0:
			return ' ';
		case 1:
			return '.';
		case 2:
			return '-';
		case 3:
			return '^';
		case 4:
			return ';';
		case 5:
			return 'o';
		case 6:
			return '*';
		case 7:
			return '%';
		case 8:
			return '$';
		case 9:
			return '#';
		}
		return '@';
	}
	public static int toColor(Vector3 colorVector) {
//		int red = (int) (colorVector.x*256);
//		int green = (int) (colorVector.y*256);
//		int blue = (int) (colorVector.z*256);
		int red = (int) (Math.sqrt(colorVector.x)*256);
		int green = (int) (Math.sqrt(colorVector.y)*256);
		int blue = (int) (Math.sqrt(colorVector.z)*256);
		if(red < 0)
			System.out.println("red<0");
		else if(red >= 256)
			System.out.println("red>=256");
		if(green < 0)
			System.out.println("green<0");
		else if(green >= 256)
			System.out.println("green>=256");
		if(blue < 0)
			System.out.println("blue<0");
		else if(blue >= 256)
			System.out.println("blue>=256");
		return (0xff << 24) + (red<<16) + (green<<8) + (blue<<0); // maybe A is needed too?
	}
}
