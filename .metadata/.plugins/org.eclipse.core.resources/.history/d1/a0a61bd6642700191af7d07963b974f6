package objects;

public class SmoothTriangle implements IIntersect, PlaneColorer{
	public Vector3 p1, p2, p3;
	public Vector3 c1, c2, c3;
	public Plane plane;
	
	public SmoothTriangle(Vector3 p1, Vector3 p2, Vector3 p3, Vector3 c1, Vector3 c2, Vector3 c3) {
		this.p1 = p1;
		this.p2 = p2;
		this.p3 = p3;
		this.c1 = c1;
		this.c2 = c2;
		this.c3 = c3;
		plane = new Plane(p1, Vector3.sub(p2, p1), Vector3.sub(p3, p1), this);
	}
	
	// this method first projects outside onto the plane, and then continues.
	public boolean isInside(Vector3 outside) {
		Vector2 projection = plane.toUV(outside);
		return (projection.x >= 0 && projection.y >= 0 && projection.x+projection.y <= 1);
	}

	@Override
	public Intersection getIntersection(Ray incoming) {
		//TODO: change this so that you don't have to intersect a weird plane
		Intersection inter = plane.getIntersection(incoming);
		// checks to see if it's in the triangle (SUPER INEFFICIENT)
		if(inter != null && isInside(inter.position)) {
			return inter;
		}
		else
			return null;
	}
	
	@Override
	public Vector3 getColor(Vector2 UVPoint) {
		// return u * (c2-c1) + v*(c3-c1) + c1
		// return (1-u-v) * c1 + u * c2 + v * c3
		Vector3 trueColor = Vector3.add(c1.scaled(1-UVPoint.x-UVPoint.y), 
				Vector3.add(c2.scaled(UVPoint.x), c3.scaled(UVPoint.y)));
		return trueColor;
	}
}
